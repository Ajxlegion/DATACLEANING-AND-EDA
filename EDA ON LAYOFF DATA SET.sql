USE LAYOFF;
SELECT * FROM LAYOFF_STAGING2;

-- EDA ON THE DATASET 
select * FROM LAYOFF_STAGING2;

SELECT MAX(TOTAL_LAID_OFF)
FROM LAYOFF_STAGING2;

SELECT MAX(PERCENTAGE_LAID_OFF), MIN(PERCENTAGE_LAID_OFF)
FROM LAYOFF_STAGING2;

SELECT COMPANY, TOTAL_LAID_OFF 
FROM LAYOFF_STAGING2
WHERE PERCENTAGE_LAID_OFF=1 AND TOTAL_LAID_OFF IS NOT NULL;

SELECT *
FROM LAYOFF_STAGING2
WHERE PERCENTAGE_LAID_OFF=1 
order by FUNDS_RAISED_MILLIONS DESC;
     
SELECT COMPANY, TOTAL_LAID_OFF
FROM LAYOFF_STAGING2
ORDER BY 2 DESC 
LIMIT 5;

SELECT COMPANY, LOCATION,COUNTRY, SUM(TOTAL_LAID_OFF)
FROM LAYOFF_STAGING2
GROUP BY COMPANY, LOCATION,COUNTRY
ORDER BY 4 DESC 
LIMIT 10;

SELECT year(`DATE`) AS ANNUAL_LAID_OFF, SUM(TOTAL_LAID_OFF)
FROM LAYOFF_STAGING2
WHERE YEAR(`DATE`) IS NOT NULL    
group by year(`DATE`)
order by 1 ASC;

SELECT INDUSTRY, SUM(TOTAL_LAID_OFF)
FROM LAYOFF_STAGING2
GROUP BY INDUSTRY
ORDER BY 2 DESC;   

SELECT STAGE, SUM(TOTAL_LAID_OFF)
FROM LAYOFF_STAGING2
GROUP BY STAGE
ORDER BY 2 DESC;  

with COMPANY_YEAR AS
(
SELECT COMPANY, YEAR(`DATE`) AS YEARS, SUM(TOTAL_LAID_OFF) AS FINAL_LAID_OFF
FROM LAYOFF_STAGING2
group by COMPANY, YEARS
)
,COMPANY_YEAR_RANK AS(
SELECT COMPANY, YEARS, FINAL_LAID_OFF, dense_rank() OVER(partition by YEARS ORDER BY FINAL_LAID_OFF DESC) AS RANKING 
FROM COMPANY_YEAR
) 
SELECT COMPANY, YEARS, FINAL_LAID_OFF, RANKING 
FROM COMPANY_YEAR_RANK
WHERE ranking <= 5
AND years IS NOT NULL
ORDER BY years ASC, FINAL_laid_off DESC;

SELECT SUBSTRING(date,1,7) as dates, SUM(total_laid_off) AS total_laid_off
FROM layoffs_staging2
GROUP BY dates
ORDER BY dates ASC;

-- now use it in a CTE so we can query off of it
WITH DATE_CTE AS 
(
SELECT SUBSTRING(date,1,7) as dates, SUM(total_laid_off) AS total_laid_off
FROM layoff_staging2
GROUP BY dates
ORDER BY dates ASC
)
SELECT dates, SUM(total_laid_off) OVER (ORDER BY dates ASC) as rolling_total_layoffs
FROM DATE_CTE
ORDER BY dates ASC;
